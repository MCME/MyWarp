plugins {
    id "com.mendhak.gradlecrowdin" version "0.1.0"
    id "com.palantir.git-version" version "0.7.1"
}

// Define variables
if (!project.hasProperty("buildNumber")) {
    ext.buildNumber = "0"
}
if (!project.hasProperty("ciSystem")) {
    ext.ciSystem = "unknown"
}
if (!project.hasProperty("commitHash")) {
    try {
        ext.commitHash = versionDetails().gitHash
    } catch (Exception ignore) {
        ext.commitHash = "unknown"
    }
}

subprojects {
    apply plugin: "java"
    apply plugin: "maven"
    apply plugin: "checkstyle"
    apply plugin: "com.mendhak.gradlecrowdin"

    // Basic project information
    group = "io.github.mywarp.mywarp"
    version = "3.1-MCME-build"

    // Extended project information
    ext.projectName = "MyWarp"
    ext.inceptionYear = "2011"
    ext.packaging = "jar"
    ext.url = "https://mywarp.github.io/"
    ext.projectDescription = "Social and self managing warps for the Minecraft multiplayer."

    ext.internalVersion = version + "-1"

    // Minimum version of Java required
    sourceCompatibility = 8
    targetCompatibility = 8

    // Project repositories
    repositories {
        jcenter()
    }

    checkstyle {
        toolVersion = "7.6.1"
        configProperties.checkstyleConfigDir = new File(rootProject.projectDir, "config/checkstyle")
        configFile = new File(configProperties.checkstyleConfigDir, "checkstyle.xml")
    }

    // JAR manifest configuration
    jar.manifest.mainAttributes(
            "Built-By": "Eriol_Eandur",
            "Created-By": System.properties["java.vm.version"] + " (" + System.properties["java.vm.vendor"] + ")",
            "Implementation-Title": name,
            "Implementation-Version": internalVersion,
            "Implementation-Vendor": url)

    jar {
        from new File(rootProject.projectDir, "LICENSE.txt")
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = "sources"
        from sourceSets.main.allSource
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = "javadoc"
        from javadoc.destinationDir
    }

    javadoc {
        options.setEncoding("UTF-8")

        if (JavaVersion.current().isJava8Compatible()) {
            // disable the super-strict doclint tool in Java 8
            options.addStringOption("Xdoclint:none", "-quiet")
        }
    }

    // handle translations
    def translationsSourceDir = "io/github/mywarp/mywarp/lang"
    def translationFinalDir = new File(sourceSets.main.output.resourcesDir, translationsSourceDir)

    // if present, additional translations will be downloaded from crowdin,
    // extracted to a temporary folder and copied to the final destination
    if (project.hasProperty("crowdinKey")) {
        
        def crowdinTempDir = "build/tmp/crowdin"

        task crowdinCopy(type: Copy) {
            FileTree tree = fileTree(dir:crowdinTempDir, include: "**/" + project.name + "/**/*.properties")
            from tree.files
            into translationFinalDir
            dependsOn(crowdinDownload)
        }
        crowdinDownload {
            projectId = "mywarp"
            apiKey = project.crowdinKey
            destination = crowdinTempDir
        }
        processResources.dependsOn(crowdinCopy)
    }

    // create the English localization files from the fallback files
    task createDefaultLocalizations(type: Copy) {
        from "src/main/resources/" + translationsSourceDir
        into translationFinalDir
        include("*.properties")
        exclude("*_*.properties")
        rename { fileName -> fileName.replace(".", "_en.") }
    }
    processResources.dependsOn(createDefaultLocalizations)

    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
    }

    build.dependsOn(checkstyleMain)
    build.dependsOn(checkstyleTest)
    build.dependsOn(sourcesJar)
    build.dependsOn(javadocJar)
}
